{
  "permissions": {
    "allow": [
      "Bash(streamlit run app.py)",
      "Bash(python init_db.py --with-sample)",
      "Bash(python init_db.py --drop-and-recreate)",
      "Bash(del pokoton.db)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name, start_date, end_date FROM sprints LIMIT 5'')\nresults = cursor.fetchall()\nfor row in results:\n    print(f''Sprint: {row[0]}, Start: {row[1]}, End: {row[2]}'')\nconn.close()\n\")",
      "Bash(python test_simulation_data.py)",
      "Bash(python create_holiday_test_project.py)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''현재 프로젝트 목록:'')\nfor p in projects:\n    print(f''ID: {p[0]} - {p[1]}'')\n\n# 샘플 프로젝트와 메모리 콜렉터 찾기\nkeep_projects = []\nfor p in projects:\n    if ''샘플'' in p[1] or ''Sample'' in p[1] or ''메모리'' in p[1] or ''Memory'' in p[1]:\n        keep_projects.append(p[0])\n        print(f''유지: ID {p[0]} - {p[1]}'')\n\n# 삭제할 프로젝트들\ndelete_projects = [p[0] for p in projects if p[0] not in keep_projects]\nprint(f''삭제 대상: {delete_projects}'')\n\n# 관련 데이터 삭제\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''삭제 완료: Project ID {pid}'')\n\nconn.commit()\nconn.close()\nprint(''프로젝트 정리 완료'')\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''Current projects:'')\nfor p in projects:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\n# Keep only projects with ID 1 and 2 (sample and memory collector)\nkeep_ids = [1, 2]\ndelete_projects = [p[0] for p in projects if p[0] not in keep_ids]\nprint(f''Will delete project IDs: {delete_projects}'')\n\n# Delete related data\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''Deleted project ID: {pid}'')\n\nconn.commit()\n\n# Show remaining projects\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nremaining = cursor.fetchall()\nprint(''Remaining projects:'')\nfor p in remaining:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\nconn.close()\nprint(''Project cleanup completed'')\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\nprint(''=== 프로젝트 목록 ==='')\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nfor p in projects:\n    print(f''ID: {p[0]} - {p[1]}'')\n\nprint(''\\n=== 샘플 프로젝트 업무 현황 ==='')\ncursor.execute(''SELECT id, item_name, priority, final_hours, build_type FROM tasks WHERE project_id = 1 ORDER BY priority, id LIMIT 10'')\ntasks = cursor.fetchall()\nfor t in tasks:\n    print(f''ID: {t[0]} - {t[1]} (우선순위: {t[2]}, 시간: {t[3]}h, 스프린트: {t[4]})'')\n\nprint(''\\n=== 샘플 프로젝트 팀원 현황 ==='')\ncursor.execute(''SELECT id, name, role FROM team_members WHERE project_id = 1'')\nmembers = cursor.fetchall()\nfor m in members:\n    print(f''ID: {m[0]} - {m[1]} ({m[2]})'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nimport traceback\n\ntry:\n    print(''=== 16조 프로젝트 시뮬레이션 실행 ==='')\n    result = run_simulation(1)\n    \n    print(f''총 업무: {result.total_tasks}개'')\n    print(f''총 예상시간: {result.total_estimated_hours:.1f}h'')\n    print(f''예상 완료일: {result.estimated_completion_days}일'')\n    \n    print(''\\n=== Round Robin 할당 결과 ==='')\n    for i, assignment in enumerate(result.round_robin_assignments):\n        print(f''{i+1}. {assignment.task_name}'')\n        print(f''   담당자: {assignment.assignee_name}'')\n        print(f''   우선순위: {assignment.priority}'')\n        print(f''   예상시간: {assignment.estimated_hours:.1f}h'')\n        print(f''   시작일차: {assignment.start_day}일차 → 실제: {assignment.start_date}'')\n        print(f''   종료일차: {assignment.end_day}일차 → 실제: {assignment.end_date}'')\n        print()\n        \nexcept Exception as e:\n    print(f''오류 발생: {e}'')\n    traceback.print_exc()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== Round Robin 순서별 상세 분석 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   시작일차: {assignment.start_day}일차'')\n    print(f''   종료일차: {assignment.end_day}일차'')\n    print(f''   실제날짜: {assignment.start_date} ~ {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom utils.calendar_utils import KoreanHolidayCalendar\nfrom datetime import date\n\nsprint_start = date(2025, 8, 28)  # 2025-08-28 (수요일)\nprint(f''스프린트 시작일: {sprint_start} ({sprint_start.strftime(\"\"%A\"\")})'')\n\n# 1일차: sprint_start + 0일\nday1 = KoreanHolidayCalendar.add_workdays(sprint_start, 0)\nprint(f''1일차: {day1} ({day1.strftime(\"\"%A\"\")})'')\n\n# 2일차: sprint_start + 1 업무일\nday2 = KoreanHolidayCalendar.add_workdays(sprint_start, 1)\nprint(f''2일차: {day2} ({day2.strftime(\"\"%A\"\")})'')\n\n# 3일차: sprint_start + 2 업무일  \nday3 = KoreanHolidayCalendar.add_workdays(sprint_start, 2)\nprint(f''3일차: {day3} ({day3.strftime(\"\"%A\"\")})'')\n\nprint()\nprint(''현재 로직 결과:'')\nprint(f''프레디 2일차 업무: {day2}'')  # 2025-08-29여야 함\nprint(''실제 CSV 결과: 2025-08-28 ← 문제!'')\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 수정 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   일차: {assignment.start_day}일차 → {assignment.end_day}일차'')\n    print(f''   실제: {assignment.start_date} → {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\n# 다양한 아이콘 테스트\nprint(''=== 프로필 아이콘 테스트 ==='')\nfor i in range(5):\n    name = [''프레디'', ''카야'', ''알렉스'', ''미나'', ''준''][i]\n    svg = ProfileIconGenerator.get_icon_svg(i, name)\n    print(f''{i}번 아이콘 ({name}): SVG 길이 {len(svg)} 문자'')\n\nprint()\nprint(''=== 현재 팀원 데이터 확인 ==='')\nfrom database import get_team_members\nmembers = get_team_members(1)\nfor m in members:\n    print(f''{m[\"\"name\"\"]}: 아이콘 인덱스 {m.get(\"\"profile_icon_index\"\", \"\"없음\"\")}'')\n\")",
      "Bash(python -c \"\nimport sqlite3, random\nfrom config import DATABASE_CONFIG\n\nconn = sqlite3.connect(DATABASE_CONFIG[''db_path''])\ncursor = conn.cursor()\n\n# 기존 팀원들에게 랜덤 아이콘 인덱스 할당\ncursor.execute(''SELECT id, name FROM team_members WHERE profile_icon_index = 0'')\nmembers = cursor.fetchall()\n\nprint(''=== 기존 팀원들에게 랜덤 아이콘 할당 ==='')\nfor member_id, name in members:\n    icon_index = random.randint(0, 9)\n    cursor.execute(''UPDATE team_members SET profile_icon_index = ? WHERE id = ?'', (icon_index, member_id))\n    print(f''{name}: 아이콘 인덱스 {icon_index} 할당'')\n\nconn.commit()\n\n# 확인\ncursor.execute(''SELECT name, profile_icon_index FROM team_members'')\nupdated_members = cursor.fetchall()\nprint()\nprint(''=== 업데이트 후 확인 ==='')\nfor name, icon_index in updated_members:\n    print(f''{name}: 아이콘 인덱스 {icon_index}'')\n\nconn.close()\n\")"
    ],
    "deny": [],
    "ask": []
  }
}