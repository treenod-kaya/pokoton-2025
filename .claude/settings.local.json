{
  "permissions": {
    "allow": [
      "Bash(streamlit run app.py)",
      "Bash(python init_db.py --with-sample)",
      "Bash(python init_db.py --drop-and-recreate)",
      "Bash(del pokoton.db)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name, start_date, end_date FROM sprints LIMIT 5'')\nresults = cursor.fetchall()\nfor row in results:\n    print(f''Sprint: {row[0]}, Start: {row[1]}, End: {row[2]}'')\nconn.close()\n\")",
      "Bash(python test_simulation_data.py)",
      "Bash(python create_holiday_test_project.py)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''현재 프로젝트 목록:'')\nfor p in projects:\n    print(f''ID: {p[0]} - {p[1]}'')\n\n# 샘플 프로젝트와 메모리 콜렉터 찾기\nkeep_projects = []\nfor p in projects:\n    if ''샘플'' in p[1] or ''Sample'' in p[1] or ''메모리'' in p[1] or ''Memory'' in p[1]:\n        keep_projects.append(p[0])\n        print(f''유지: ID {p[0]} - {p[1]}'')\n\n# 삭제할 프로젝트들\ndelete_projects = [p[0] for p in projects if p[0] not in keep_projects]\nprint(f''삭제 대상: {delete_projects}'')\n\n# 관련 데이터 삭제\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''삭제 완료: Project ID {pid}'')\n\nconn.commit()\nconn.close()\nprint(''프로젝트 정리 완료'')\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''Current projects:'')\nfor p in projects:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\n# Keep only projects with ID 1 and 2 (sample and memory collector)\nkeep_ids = [1, 2]\ndelete_projects = [p[0] for p in projects if p[0] not in keep_ids]\nprint(f''Will delete project IDs: {delete_projects}'')\n\n# Delete related data\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''Deleted project ID: {pid}'')\n\nconn.commit()\n\n# Show remaining projects\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nremaining = cursor.fetchall()\nprint(''Remaining projects:'')\nfor p in remaining:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\nconn.close()\nprint(''Project cleanup completed'')\n\")"
    ],
    "deny": [],
    "ask": []
  }
}