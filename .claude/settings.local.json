{
  "permissions": {
    "allow": [
      "Bash(streamlit run app.py)",
      "Bash(python init_db.py --with-sample)",
      "Bash(python init_db.py --drop-and-recreate)",
      "Bash(del pokoton.db)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name, start_date, end_date FROM sprints LIMIT 5'')\nresults = cursor.fetchall()\nfor row in results:\n    print(f''Sprint: {row[0]}, Start: {row[1]}, End: {row[2]}'')\nconn.close()\n\")",
      "Bash(python test_simulation_data.py)",
      "Bash(python create_holiday_test_project.py)",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''현재 프로젝트 목록:'')\nfor p in projects:\n    print(f''ID: {p[0]} - {p[1]}'')\n\n# 샘플 프로젝트와 메모리 콜렉터 찾기\nkeep_projects = []\nfor p in projects:\n    if ''샘플'' in p[1] or ''Sample'' in p[1] or ''메모리'' in p[1] or ''Memory'' in p[1]:\n        keep_projects.append(p[0])\n        print(f''유지: ID {p[0]} - {p[1]}'')\n\n# 삭제할 프로젝트들\ndelete_projects = [p[0] for p in projects if p[0] not in keep_projects]\nprint(f''삭제 대상: {delete_projects}'')\n\n# 관련 데이터 삭제\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''삭제 완료: Project ID {pid}'')\n\nconn.commit()\nconn.close()\nprint(''프로젝트 정리 완료'')\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nprint(''Current projects:'')\nfor p in projects:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\n# Keep only projects with ID 1 and 2 (sample and memory collector)\nkeep_ids = [1, 2]\ndelete_projects = [p[0] for p in projects if p[0] not in keep_ids]\nprint(f''Will delete project IDs: {delete_projects}'')\n\n# Delete related data\nfor pid in delete_projects:\n    cursor.execute(''DELETE FROM tasks WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM team_members WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM sprints WHERE project_id = ?'', (pid,))\n    cursor.execute(''DELETE FROM projects WHERE id = ?'', (pid,))\n    print(f''Deleted project ID: {pid}'')\n\nconn.commit()\n\n# Show remaining projects\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nremaining = cursor.fetchall()\nprint(''Remaining projects:'')\nfor p in remaining:\n    print(f''ID: {p[0]} - Name: {p[1]}'')\n\nconn.close()\nprint(''Project cleanup completed'')\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\nprint(''=== 프로젝트 목록 ==='')\ncursor.execute(''SELECT id, name FROM projects ORDER BY id'')\nprojects = cursor.fetchall()\nfor p in projects:\n    print(f''ID: {p[0]} - {p[1]}'')\n\nprint(''\\n=== 샘플 프로젝트 업무 현황 ==='')\ncursor.execute(''SELECT id, item_name, priority, final_hours, build_type FROM tasks WHERE project_id = 1 ORDER BY priority, id LIMIT 10'')\ntasks = cursor.fetchall()\nfor t in tasks:\n    print(f''ID: {t[0]} - {t[1]} (우선순위: {t[2]}, 시간: {t[3]}h, 스프린트: {t[4]})'')\n\nprint(''\\n=== 샘플 프로젝트 팀원 현황 ==='')\ncursor.execute(''SELECT id, name, role FROM team_members WHERE project_id = 1'')\nmembers = cursor.fetchall()\nfor m in members:\n    print(f''ID: {m[0]} - {m[1]} ({m[2]})'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nimport traceback\n\ntry:\n    print(''=== 16조 프로젝트 시뮬레이션 실행 ==='')\n    result = run_simulation(1)\n    \n    print(f''총 업무: {result.total_tasks}개'')\n    print(f''총 예상시간: {result.total_estimated_hours:.1f}h'')\n    print(f''예상 완료일: {result.estimated_completion_days}일'')\n    \n    print(''\\n=== Round Robin 할당 결과 ==='')\n    for i, assignment in enumerate(result.round_robin_assignments):\n        print(f''{i+1}. {assignment.task_name}'')\n        print(f''   담당자: {assignment.assignee_name}'')\n        print(f''   우선순위: {assignment.priority}'')\n        print(f''   예상시간: {assignment.estimated_hours:.1f}h'')\n        print(f''   시작일차: {assignment.start_day}일차 → 실제: {assignment.start_date}'')\n        print(f''   종료일차: {assignment.end_day}일차 → 실제: {assignment.end_date}'')\n        print()\n        \nexcept Exception as e:\n    print(f''오류 발생: {e}'')\n    traceback.print_exc()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== Round Robin 순서별 상세 분석 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   시작일차: {assignment.start_day}일차'')\n    print(f''   종료일차: {assignment.end_day}일차'')\n    print(f''   실제날짜: {assignment.start_date} ~ {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom utils.calendar_utils import KoreanHolidayCalendar\nfrom datetime import date\n\nsprint_start = date(2025, 8, 28)  # 2025-08-28 (수요일)\nprint(f''스프린트 시작일: {sprint_start} ({sprint_start.strftime(\"\"%A\"\")})'')\n\n# 1일차: sprint_start + 0일\nday1 = KoreanHolidayCalendar.add_workdays(sprint_start, 0)\nprint(f''1일차: {day1} ({day1.strftime(\"\"%A\"\")})'')\n\n# 2일차: sprint_start + 1 업무일\nday2 = KoreanHolidayCalendar.add_workdays(sprint_start, 1)\nprint(f''2일차: {day2} ({day2.strftime(\"\"%A\"\")})'')\n\n# 3일차: sprint_start + 2 업무일  \nday3 = KoreanHolidayCalendar.add_workdays(sprint_start, 2)\nprint(f''3일차: {day3} ({day3.strftime(\"\"%A\"\")})'')\n\nprint()\nprint(''현재 로직 결과:'')\nprint(f''프레디 2일차 업무: {day2}'')  # 2025-08-29여야 함\nprint(''실제 CSV 결과: 2025-08-28 ← 문제!'')\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 수정 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   일차: {assignment.start_day}일차 → {assignment.end_day}일차'')\n    print(f''   실제: {assignment.start_date} → {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\n# 다양한 아이콘 테스트\nprint(''=== 프로필 아이콘 테스트 ==='')\nfor i in range(5):\n    name = [''프레디'', ''카야'', ''알렉스'', ''미나'', ''준''][i]\n    svg = ProfileIconGenerator.get_icon_svg(i, name)\n    print(f''{i}번 아이콘 ({name}): SVG 길이 {len(svg)} 문자'')\n\nprint()\nprint(''=== 현재 팀원 데이터 확인 ==='')\nfrom database import get_team_members\nmembers = get_team_members(1)\nfor m in members:\n    print(f''{m[\"\"name\"\"]}: 아이콘 인덱스 {m.get(\"\"profile_icon_index\"\", \"\"없음\"\")}'')\n\")",
      "Bash(python -c \"\nimport sqlite3, random\nfrom config import DATABASE_CONFIG\n\nconn = sqlite3.connect(DATABASE_CONFIG[''db_path''])\ncursor = conn.cursor()\n\n# 기존 팀원들에게 랜덤 아이콘 인덱스 할당\ncursor.execute(''SELECT id, name FROM team_members WHERE profile_icon_index = 0'')\nmembers = cursor.fetchall()\n\nprint(''=== 기존 팀원들에게 랜덤 아이콘 할당 ==='')\nfor member_id, name in members:\n    icon_index = random.randint(0, 9)\n    cursor.execute(''UPDATE team_members SET profile_icon_index = ? WHERE id = ?'', (icon_index, member_id))\n    print(f''{name}: 아이콘 인덱스 {icon_index} 할당'')\n\nconn.commit()\n\n# 확인\ncursor.execute(''SELECT name, profile_icon_index FROM team_members'')\nupdated_members = cursor.fetchall()\nprint()\nprint(''=== 업데이트 후 확인 ==='')\nfor name, icon_index in updated_members:\n    print(f''{name}: 아이콘 인덱스 {icon_index}'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== 로컬 이미지 파일 확인 ==='')\nfor i in range(5):\n    image_path = ProfileIconGenerator._get_local_image_path(i)\n    if image_path:\n        print(f''인덱스 {i}: {image_path} (존재함)'')\n    else:\n        print(f''인덱스 {i}: 로컬 이미지 없음 → SVG 사용'')\n\nprint()\nprint(''=== 아이콘 생성 테스트 ==='')\nbase64_0 = ProfileIconGenerator.get_icon_base64(0, ''프레디'')\nbase64_5 = ProfileIconGenerator.get_icon_base64(5, ''준호'')\nprint(f''인덱스 0 (프레디): {\"로컬 이미지\" if base64_0.startswith(\"data:image/png\") else \"SVG\"}'')\nprint(f''인덱스 5 (준호): {\"로컬 이미지\" if base64_5.startswith(\"data:image/png\") else \"SVG\"}'')\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== Local Image File Check ==='')\nfor i in range(5):\n    image_path = ProfileIconGenerator._get_local_image_path(i)\n    if image_path:\n        print(f''Index {i}: {image_path} (EXISTS)'')\n    else:\n        print(f''Index {i}: No local image, will use SVG'')\n\nprint()\nprint(''=== Icon Generation Test ==='')\nbase64_0 = ProfileIconGenerator.get_icon_base64(0, ''Freddy'')\nbase64_5 = ProfileIconGenerator.get_icon_base64(5, ''John'')\nprint(f''Index 0: Type = {\"\"Local Image\"\" if \"\"image/png\"\" in base64_0 or \"\"image/jpg\"\" in base64_0 else \"\"SVG\"\"}'')\nprint(f''Index 5: Type = {\"\"Local Image\"\" if \"\"image/png\"\" in base64_5 or \"\"image/jpg\"\" in base64_5 else \"\"SVG\"\"}'')\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== Round Robin 할당 순서 분석 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   시작일차: {assignment.start_day}일차'')\n    print(f''   종료일차: {assignment.end_day}일차'') \n    print(f''   실제날짜: {assignment.start_date} ~ {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 수정 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   시작일차: {assignment.start_day}일차'')\n    print(f''   종료일차: {assignment.end_day}일차'')\n    print(f''   실제날짜: {assignment.start_date} ~ {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== Round Robin 할당 순서 확인 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')  \n    print(f''   우선순위: P{assignment.priority}'')\n    print(f''   시작일차: {assignment.start_day}일차'')\n    print(f''   종료일차: {assignment.end_day}일차'')\n    print(f''   실제날짜: {assignment.start_date} ~ {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 수정 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print(f''   일차: {assignment.start_day}일차 → {assignment.end_day}일차'')\n    print(f''   실제: {assignment.start_date} → {assignment.end_date}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom database import get_team_members\nmembers = get_team_members(1)\nprint(''=== 현재 데이터베이스 팀원 목록 ==='')\nfor m in members:\n    print(f''ID: {m[\"\"id\"\"]} - 이름: {m[\"\"name\"\"]} - 역할: {m[\"\"role\"\"]}'')\n\")",
      "Bash(python -c \"\nfrom simulation import RoundRobinSimulator\nfrom database import get_team_members, get_tasks\n\n# 시뮬레이터 초기화\nsimulator = RoundRobinSimulator(1)\nprint(''=== 시뮬레이터에서 사용하는 팀원 목록 ==='')\nfor i, member in enumerate(simulator.team_members):\n    print(f''{i}: ID {member[\"\"id\"\"]} - 이름: {member[\"\"name\"\"]} - 역할: {member[\"\"role\"\"]}'')\n\nprint()\nprint(''=== Round Robin 시뮬레이션 결과 ==='')\nresult = simulator.run_simulation()\nfor i, assignment in enumerate(result.round_robin_assignments[:3]):  # 처음 3개만\n    print(f''{i+1}. {assignment.task_name} → {assignment.assignee_name}'')\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\n\nprint(''=== 현재 시뮬레이션 결과 ==='')\nresult = run_simulation(1)\n\nprint(''팀원 목록:'')\nfor assignment in result.round_robin_assignments[:6]:\n    print(f''{assignment.task_name} → {assignment.assignee_name}'')\n\")",
      "Bash(python -c \"\nfrom simulation import RoundRobinSimulator\n\n# 시뮬레이터 초기화\nsimulator = RoundRobinSimulator(1)\nprint(''=== 시뮬레이터에서 사용하는 팀원 목록 ==='')\nprint(f''총 팀원 수: {len(simulator.team_members)}명'')\nfor i, member in enumerate(simulator.team_members):\n    print(f''{i}: 이름: {member[\"\"name\"\"]} - 역할: {member[\"\"role\"\"]}'')\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== Round Robin 할당 결과 (처음 3개) ==='')\nfor i, assignment in enumerate(result.round_robin_assignments[:3]):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\nprint(''=== 팀원 현황 ==='')\ncursor.execute(''SELECT id, name, role FROM team_members WHERE project_id = 1 ORDER BY id'')\nmembers = cursor.fetchall()\nfor m in members:\n    print(f''ID: {m[0]} - 이름: {m[1]} - 역할: {m[2]}'')\n\nprint(''\\n=== 업무 담당자 현황 ==='')\ncursor.execute(''SELECT id, item_name, assignee FROM tasks WHERE project_id = 1 ORDER BY id'')\ntasks = cursor.fetchall()\nfor t in tasks:\n    print(f''업무 ID: {t[0]} - 업무명: {t[1]} - 담당자: \"\"{t[2]}\"\"'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 수정 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print()\n\")",
      "Bash(python -c \"\nfrom simulation import run_simulation\nresult = run_simulation(1)\n\nprint(''=== 담당자 매핑 후 Round Robin 할당 결과 ==='')\nfor i, assignment in enumerate(result.round_robin_assignments):\n    print(f''{i+1}. {assignment.task_name}'')\n    print(f''   담당자: {assignment.assignee_name}'')\n    print()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\n# 테이블 스키마 확인\ncursor.execute(''PRAGMA table_info(team_members)'')\ncolumns = cursor.fetchall()\nprint(''=== team_members 테이블 스키마 ==='')\nfor col in columns:\n    print(f''{col[1]}: {col[2]}'')\n\n# 현재 데이터 확인\ncursor.execute(''SELECT id, name, hire_date FROM team_members WHERE project_id = 1'')\nmembers = cursor.fetchall()\nprint(''\\n=== 현재 팀원 hire_date 상태 ==='')\nfor m in members:\n    print(f''ID: {m[0]} - 이름: {m[1]} - 입사일: {m[2]}'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\ntry:\n    cursor.execute(''ALTER TABLE team_members ADD COLUMN hire_date TEXT'')\n    print(''>> team_members 테이블에 hire_date 컬럼 추가 완료'')\n    conn.commit()\nexcept sqlite3.OperationalError as e:\n    print(f''>> 컬럼 추가 오류: {e}'')\n\n# 스키마 확인\ncursor.execute(''PRAGMA table_info(team_members)'')\ncolumns = cursor.fetchall()\nprint(''\\n=== 업데이트 후 스키마 ==='')\nfor col in columns:\n    print(f''{col[1]}: {col[2]}'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== 아이콘 생성 테스트 ==='')\nfor i in range(3):\n    name = [''프레디'', ''카야'', ''사라''][i]\n    \n    # HTML 생성 테스트\n    try:\n        icon_html = ProfileIconGenerator.get_icon_html(i, name, size=40)\n        print(f''{i}번 아이콘 ({name}):'')\n        print(f''  HTML: {icon_html[:100]}...'')\n        \n        # Base64 데이터 확인\n        base64_data = ProfileIconGenerator.get_icon_base64(i, name)\n        print(f''  Base64 시작: {base64_data[:50]}...'')\n        print()\n    except Exception as e:\n        print(f''{i}번 아이콘 오류: {e}'')\n        print()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\ntry:\n    cursor.execute(''ALTER TABLE team_members ADD COLUMN hire_date TEXT'')\n    print(''>> team_members 테이블에 hire_date 컬럼 추가 완료'')\n    conn.commit()\nexcept sqlite3.OperationalError as e:\n    print(f''>> 컬럼 추가 오류: {e}'')\n\n# 스키마 확인\ncursor.execute(''PRAGMA table_info(team_members)'')\ncolumns = cursor.fetchall()\nprint(''\\n=== 업데이트 후 스키마 ==='')\nfor col in columns:\n    print(f''{col[1]}: {col[2]}'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\nprint(''=== 팀원 데이터 상태 확인 ==='')\ncursor.execute(''SELECT id, name, role, hire_date, created_at FROM team_members WHERE project_id = 1'')\nmembers = cursor.fetchall()\nfor m in members:\n    print(f''ID: {m[0]} - 이름: {m[1]} - 역할: {m[2]}'')\n    print(f''  입사일: \"\"{m[3]}\"\" (타입: {type(m[3])}, 길이: {len(str(m[3])) if m[3] else 0})'')\n    print(f''  등록일: \"\"{m[4]}\"\"'')\n    print()\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom database import get_team_members\nimport html\n\nprint(''=== HTML 생성 테스트 ==='')\nmembers = get_team_members(1)\nif members:\n    member = members[0]  # 첫 번째 팀원으로 테스트\n    \n    print(f''팀원 데이터: {member}'')\n    print()\n    \n    # 현재 코드 로직 따라해보기\n    hire_date_display = member.get(''hire_date'')\n    print(f''hire_date_display 원본: {hire_date_display} (타입: {type(hire_date_display)})'')\n    \n    if not hire_date_display or hire_date_display == ''None'':\n        hire_date_display = ''미입력''\n    print(f''hire_date_display 처리 후: {hire_date_display}'')\n    \n    safe_hire_date = html.escape(str(hire_date_display))\n    print(f''safe_hire_date: {safe_hire_date}'')\n    \n    # D-DAY 계산\n    d_day_text = ''''\n    hire_date_value = member.get(''hire_date'')\n    print(f''D-DAY 계산용 hire_date_value: {hire_date_value} (타입: {type(hire_date_value)})'')\n    \n    if hire_date_value and hire_date_value != ''None'' and str(hire_date_value).strip():\n        print(''D-DAY 계산 시도...'')\n        try:\n            from datetime import date, datetime\n            hire_date = datetime.strptime(hire_date_value, ''%Y-%m-%d'').date()\n            today = date.today()\n            days_diff = (today - hire_date).days\n            \n            if days_diff == 0:\n                d_day_text = ''D-DAY''\n            else:\n                d_day_text = f''D+{days_diff}''\n        except Exception as e:\n            print(f''D-DAY 계산 오류: {e}'')\n            d_day_text = ''''\n    else:\n        print(''D-DAY 계산 조건 불만족'')\n    \n    print(f''d_day_text: \"\"{d_day_text}\"\"'')\n    safe_d_day = html.escape(str(d_day_text)) if d_day_text else ''''\n    print(f''safe_d_day: \"\"{safe_d_day}\"\"'')\n\")",
      "Bash(python -c \"\nfrom database import get_team_members\nimport html\n\nprint(''=== 실제 HTML 카드 생성 테스트 ==='')\nmembers = get_team_members(1)\nif members:\n    member = members[0]  # 첫 번째 팀원으로 테스트\n    \n    # 아이콘 생성 테스트\n    try:\n        from utils.icon_generator import ProfileIconGenerator\n        icon_html = ProfileIconGenerator.get_icon_html(\n            member.get(''profile_icon_index'', 0), \n            member[''name''], \n            size=40\n        )\n        print(f''아이콘 HTML: {icon_html[:100]}...'')\n    except Exception as e:\n        icon_html = ''<span style=\"\"margin-right: 8px;\"\">👤</span>''\n        print(f''아이콘 생성 실패, 기본값 사용: {e}'')\n    \n    # 모든 변수 준비\n    safe_name = html.escape(str(member.get(''name'', ''이름없음'')))\n    safe_role = html.escape(str(member.get(''role'', ''역할없음'')))\n    \n    hire_date_display = member.get(''hire_date'')\n    if not hire_date_display or hire_date_display == ''None'':\n        hire_date_display = ''미입력''\n    safe_hire_date = html.escape(str(hire_date_display))\n    \n    created_at_display = member.get(''created_at'', '''')\n    if created_at_display:\n        try:\n            created_at_display = created_at_display[:10]\n        except:\n            created_at_display = ''미상''\n    else:\n        created_at_display = ''미상''\n    safe_created_at = html.escape(str(created_at_display))\n    \n    # D-DAY (빈 문자열)\n    safe_d_day = ''''\n    \n    print()\n    print(''=== 변수들 ==='')\n    print(f''safe_name: \"\"{safe_name}\"\"'')\n    print(f''safe_role: \"\"{safe_role}\"\"'')\n    print(f''safe_hire_date: \"\"{safe_hire_date}\"\"'')\n    print(f''safe_created_at: \"\"{safe_created_at}\"\"'')\n    print(f''safe_d_day: \"\"{safe_d_day}\"\"'')\n    \n    # 실제 HTML 카드 생성\n    card_html = f\"\"\"\"\"\"\n                    <div style=\"\"\n                        border: 1px solid rgba(128, 128, 128, 0.5);\n                        border-radius: 8px;\n                        padding: 15px;\n                        margin: 10px 0;\n                        background: rgba(0, 0, 0, 0.05);\n                        backdrop-filter: blur(5px);\n                    \"\">\n                        <h4 style=\"\"margin: 0 0 10px 0; color: inherit; display: flex; align-items: center;\"\">\n                            {icon_html}{safe_name}\n                            {f''<span style=\"\"margin-left: auto; font-size: 12px; background: rgba(0,123,255,0.1); padding: 2px 6px; border-radius: 12px; border: 1px solid rgba(0,123,255,0.3);\"\">{safe_d_day}</span>'' if safe_d_day else ''''}\n                        </h4>\n                        <p style=\"\"margin: 5px 0; color: inherit;\"\"><b>역할:</b> {safe_role}</p>\n                        <p style=\"\"margin: 5px 0; color: inherit;\"\"><b>입사일:</b> {safe_hire_date}</p>\n                        <p style=\"\"margin: 5px 0; color: inherit; opacity: 0.7;\"\"><small>등록일: {safe_created_at}</small></p>\n                    </div>\n                    \"\"\"\"\"\"\n    \n    print()\n    print(''=== 생성된 HTML ==='')\n    print(card_html)\n\")",
      "Bash(python -c \"\nfrom database import get_team_members\nimport html\n\nprint(''=== 수정 후 HTML 생성 테스트 ==='')\nmembers = get_team_members(1)\nif members:\n    member = members[0]  # 첫 번째 팀원으로 테스트\n    \n    # 아이콘 생성\n    try:\n        from utils.icon_generator import ProfileIconGenerator\n        icon_html = ProfileIconGenerator.get_icon_html(\n            member.get(''profile_icon_index'', 0), \n            member[''name''], \n            size=40\n        )\n    except Exception as e:\n        icon_html = ''<span style=\"\"margin-right: 8px;\"\">👤</span>''\n    \n    # 안전한 변수 처리\n    safe_name = html.escape(str(member.get(''name'', ''이름없음'')))\n    safe_role = html.escape(str(member.get(''role'', ''역할없음'')))\n    \n    # 입사일 처리 (수정된 로직)\n    hire_date_display = member.get(''hire_date'')\n    if (not hire_date_display or \n        hire_date_display == ''None'' or \n        str(hire_date_display).strip() == '''' or\n        str(hire_date_display).strip().lower() == ''none''):\n        hire_date_display = ''미입력''\n    safe_hire_date = html.escape(str(hire_date_display))\n    \n    # 등록일 처리 (수정된 로직)\n    created_at_display = member.get(''created_at'', '''')\n    if created_at_display and str(created_at_display).strip():\n        try:\n            created_at_str = str(created_at_display)\n            if len(created_at_str) >= 10:\n                created_at_display = created_at_str[:10]\n            else:\n                created_at_display = created_at_str\n        except Exception as e:\n            created_at_display = ''미상''\n    else:\n        created_at_display = ''미상''\n    safe_created_at = html.escape(str(created_at_display))\n    \n    # D-DAY 처리\n    safe_d_day = ''''\n    d_day_span = f''<span style=\"\"margin-left: auto; font-size: 12px; background: rgba(0,123,255,0.1); padding: 2px 6px; border-radius: 12px; border: 1px solid rgba(0,123,255,0.3);\"\">{safe_d_day}</span>'' if safe_d_day else ''''\n    \n    # 최종 HTML 생성 (한 줄로)\n    card_html = f''<div style=\"\"border: 1px solid rgba(128, 128, 128, 0.5); border-radius: 8px; padding: 15px; margin: 10px 0; background: rgba(0, 0, 0, 0.05); backdrop-filter: blur(5px);\"\"><h4 style=\"\"margin: 0 0 10px 0; color: inherit; display: flex; align-items: center;\"\">{icon_html}{safe_name}{d_day_span}</h4><p style=\"\"margin: 5px 0; color: inherit;\"\"><b>역할:</b> {safe_role}</p><p style=\"\"margin: 5px 0; color: inherit;\"\"><b>입사일:</b> {safe_hire_date}</p><p style=\"\"margin: 5px 0; color: inherit; opacity: 0.7;\"\"><small>등록일: {safe_created_at}</small></p></div>''\n    \n    print(''=== 처리된 변수들 ==='')\n    print(f''safe_name: \"\"{safe_name}\"\"'')\n    print(f''safe_role: \"\"{safe_role}\"\"'')\n    print(f''safe_hire_date: \"\"{safe_hire_date}\"\"'')\n    print(f''safe_created_at: \"\"{safe_created_at}\"\"'')\n    print(f''safe_d_day: \"\"{safe_d_day}\"\"'')\n    \n    print()\n    print(''=== 최종 HTML (처음 200자) ==='')\n    print(card_html[:200] + ''...'')\n    \n    print()\n    print(''=== HTML 끝부분 ==='')\n    print(''...'' + card_html[-100:])\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== Local Image File Check ==='')\nfor i in range(5):\n    image_path = ProfileIconGenerator._get_local_image_path(i)\n    if image_path:\n        print(f''Index {i}: {image_path} (EXISTS)'')\n    else:\n        print(f''Index {i}: No local image, will use SVG'')\n\nprint()\nprint(''=== Icon Generation Test ==='')\nbase64_0 = ProfileIconGenerator.get_icon_base64(0, ''Freddy'')\nbase64_5 = ProfileIconGenerator.get_icon_base64(5, ''John'')\nprint(f''Index 0: Type = {\"\"Local Image\"\" if \"\"image/png\"\" in base64_0 or \"\"image/jpg\"\" in base64_0 else \"\"SVG\"\"}'')\nprint(f''Index 5: Type = {\"\"Local Image\"\" if \"\"image/png\"\" in base64_5 or \"\"image/jpg\"\" in base64_5 else \"\"SVG\"\"}'')\n\")",
      "Bash(python -c \"\nfrom database import get_team_members\nmembers = get_team_members(1)\nprint(''=== 현재 데이터베이스 팀원 목록 ==='')\nfor m in members:\n    print(f''ID: {m[\"\"id\"\"]} - 이름: {m[\"\"name\"\"]} - 역할: {m[\"\"role\"\"]}'')\n\")",
      "Bash(python -c \"\nfrom simulation import RoundRobinSimulator\n\n# 시뮬레이터 초기화\nsimulator = RoundRobinSimulator(1)\nprint(''=== 시뮬레이터에서 사용하는 팀원 목록 ==='')\nprint(f''총 팀원 수: {len(simulator.team_members)}명'')\nfor i, member in enumerate(simulator.team_members):\n    print(f''{i}: 이름: {member[\"\"name\"\"]} - 역할: {member[\"\"role\"\"]}'')\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== 아이콘 생성 테스트 ==='')\nfor i in range(3):\n    name = [''프레디'', ''카야'', ''사라''][i]\n    \n    # HTML 생성 테스트\n    try:\n        icon_html = ProfileIconGenerator.get_icon_html(i, name, size=40)\n        print(f''{i}번 아이콘 ({name}):'')\n        print(f''  HTML: {icon_html[:100]}...'')\n        \n        # Base64 데이터 확인\n        base64_data = ProfileIconGenerator.get_icon_base64(i, name)\n        print(f''  Base64 시작: {base64_data[:50]}...'')\n        print()\n    except Exception as e:\n        print(f''{i}번 아이콘 오류: {e}'')\n        print()\n\")",
      "Bash(python -c \"\nimport sqlite3\nconn = sqlite3.connect(''pokoton.db'')\ncursor = conn.cursor()\n\nprint(''=== 팀원들의 profile_icon_index 확인 ==='')\ncursor.execute(''SELECT id, name, profile_icon_index FROM team_members WHERE project_id = 1'')\nmembers = cursor.fetchall()\nfor m in members:\n    print(f''ID: {m[0]} - 이름: {m[1]} - 아이콘 인덱스: {m[2]}'')\n\nconn.close()\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== 인덱스별 아이콘 타입 확인 ==='')\nfor i in range(6):\n    base64_data = ProfileIconGenerator.get_icon_base64(i, f''테스트{i}'')\n    \n    if ''image/png'' in base64_data or ''image/jpg'' in base64_data:\n        icon_type = ''로컬 이미지''\n    elif ''image/svg'' in base64_data:\n        icon_type = ''SVG 생성''\n    else:\n        icon_type = ''알 수 없음''\n    \n    print(f''인덱스 {i}: {icon_type}'')\n\")",
      "Bash(python -c \"\nfrom utils.icon_generator import ProfileIconGenerator\n\nprint(''=== 수정 후 인덱스별 아이콘 타입 확인 ==='')\nfor i in range(6):\n    base64_data = ProfileIconGenerator.get_icon_base64(i, f''테스트{i}'')\n    \n    if ''image/png'' in base64_data or ''image/jpg'' in base64_data:\n        icon_type = ''로컬 이미지''\n    elif ''image/svg'' in base64_data:\n        icon_type = ''SVG 생성''\n    else:\n        icon_type = ''알 수 없음''\n    \n    print(f''인덱스 {i}: {icon_type}'')\n\")",
      "Bash(python -c \"from components.task_distribution_components import TaskDistributionSimulator, TaskDistributionViewer\")",
      "Bash(python -c \"from components import ProjectSelector, ProjectInfo\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")",
      "Bash(python -c \"from components import TaskDistributionSimulator, TaskDistributionViewer; print(''Import successful!'')\")"
    ],
    "deny": [],
    "ask": []
  }
}